// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-

#ifndef __javax_swing_Timer__
#define __javax_swing_Timer__

#pragma interface

#include <java/lang/Object.h>
#include <gcj/array.h>

extern "Java"
{
  namespace java
  {
    namespace awt
    {
      namespace event
      {
        class ActionEvent;
        class ActionListener;
      }
    }
  }
  namespace javax
  {
    namespace swing
    {
      class Timer;
      class Timer$Waker;
      namespace event
      {
        class EventListenerList;
      }
    }
  }
}

class javax::swing::Timer : public ::java::lang::Object
{
private:
  void queueEvent ();
  void drainEvents ();
public:
  Timer (jint, ::java::awt::event::ActionListener *);
  virtual void setCoalesce (jboolean);
  virtual jboolean isCoalesce () { return coalesce; }
  virtual void addActionListener (::java::awt::event::ActionListener *);
  virtual void removeActionListener (::java::awt::event::ActionListener *);
  virtual JArray< ::java::util::EventListener *> *getListeners (::java::lang::Class *);
  virtual JArray< ::java::awt::event::ActionListener *> *getActionListeners ();
public:  // actually protected
  virtual void fireActionPerformed (::java::awt::event::ActionEvent *);
public: // actually package-private
  virtual void fireActionPerformed ();
public:
  static void setLogTimers (jboolean);
  static jboolean getLogTimers ();
  virtual void setDelay (jint);
  virtual jint getDelay () { return delay; }
  virtual void setInitialDelay (jint);
  virtual jint getInitialDelay () { return initialDelay; }
  virtual void setRepeats (jboolean);
  virtual jboolean isRepeats () { return repeats; }
  virtual jboolean isRunning () { return running; }
  virtual void start ();
  virtual void restart ();
  virtual void stop ();
private:
  static const jlong serialVersionUID = -1116180831621385484LL;
public:  // actually protected
  ::javax::swing::event::EventListenerList * __attribute__((aligned(__alignof__( ::java::lang::Object )))) listenerList;
private:
  jlong queue;
  ::java::lang::Object *queueLock;
  ::javax::swing::Timer$Waker *waker;
public: // actually package-private
  static jboolean logTimers;
  jboolean coalesce;
  jboolean repeats;
  jboolean running;
  jint ticks;
  jint delay;
  jint initialDelay;

  friend class javax_swing_Timer$Waker;
  friend class javax_swing_Timer$1;
public:

  static ::java::lang::Class class$;
};

#endif /* __javax_swing_Timer__ */
